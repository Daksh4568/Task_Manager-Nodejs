const express = require('express')
// we are requring the mongoose.js file so that we can connect to the database as we have written the code for the connection in mongoose file
require('./db/mongoose.js')

const User = require('./models/user.js')
const Task = require('./models/task.model.js')

const app = express()
const port = process.env.PORT || 3000
//app.use(express.json()) is a middleware function in Express.js that parses incoming JSON requests. It is used to handle requests where the client 
//sends JSON data in the body, typically in POST, PUT, or PATCH requests.

app.use(express.json())


//this is the get handler which will fetch all the users
//app.get() is used to define a route handler for HTTP GET requests. These requests are typically used to retrieve data from a server or database.
app.get('/users' , (req , res)=>{
// we can use User.find({}) to find particular users on the basis of argument that we provide , it accepts object in the argument
     User.find({}).then((users)=>{
        res.send(users)
     }).catch((e)=>{
        res.status(500).send(e)
     })
})

// we are creating a get handler which can fetch the user based on the id 
app.get('/users/:id' , (req,res)=>{
    const id = req.params.id
    
    User.findById(id).then((user)=>{
        if(!user){
            return res.status(404).send()
        }
        res.send(user)
    }).catch((e)=>{
        res.status(500).send(e)
    })
})
// first argument is the path and second is the callback function 
//POST: Send data to create a new resource (e.g., add a new user).
//Here we have created the endpoints to create the resources. 

app.post('/users' , (req , res)=>{ 
    const user = new User(req.body)

    user.save().then(()=>{
        res.status(201).send(user)
    }).catch((error)=>{
        res.status(400).send(error)
    })
})
app.post('/tasks' , (req,res)=>{
    const task = new Task(req.body)

    task.save().then(()=>{
        res.status(201).send(user)
    }).catch((error)=>{
        res.status(400).send(error)
    })
})

app.get('/tasks' , (req,res)=>{
    Task.find({}).then((tasks)=>{
        res.send(tasks)
    }).catch((e)=>{
        res.status(500).send()
    })
})

app.get('tasks/:id' , (req,res)=>{
    const id = req.params.id

    Task.findById(id).then((task)=>{
        if(!task){
            return res.status(404).send()
        }
        res.send(task)
    }).catch((e)=>{
        res.status(500).send()
    })
})
app.listen(port , ()=>{
    console.log('Server is running on port ' + port)
})

